; lpc_player
;
; This application is a tool that allows you to stream raw LPC bytes into the app
; via the serial connection and the will be played on the TMS5220. The input is a specific format:
;
;    xx xx xx xx 
;
; where xx is a hex encoded byte (no preceeding "0x").  White space and commas are used as a list seperator.
; When data is done being entered, press ESCAPE to initiate conversation to speech.
;
#require "slu4-min64x4-asm >= 1.1.0"

DATA_BUFFER_SIZE = 4096

ESCAPE_CHAR = 27
DELETE_CHAR = 0xf0      ; this is a Min64x4 value

; 'enums' used for indicating the finite state machine status.
; Values pertain to jump table offsets.
READ_STATE_START = 0
READ_STATE_DATA_WS = 2
READ_STATE_DATA_HEX = 4
READ_STATE_CLOSED = 6


.org 0 "USER_APPS"
init:
    spinit
    jps speech_init

start_receive:
    jps _Clear
    mib 0,_YPos
    jps _Print "Ready to receive encoded LPC from Serial\nExpected format: 01 2 ab ... DE <ESCAPE>\nPress DELETE to cancel >\n"
    jps _SerialPrint "Ready to send encoded LPC >\n"


start_read:
    miv data_buffer,data_buffer_ptr     ; set buffer ptr to start of buffer
    miz READ_STATE_DATA_WS,data_read_state ; set state machine to start
    phs                                 ; dummy push so that the loops can start with a pull
.read_next_byte:
    pls                                 ; remove character on stack before continuing
    jps _ReadInput                      ; get next input byte
    phs                                 ; save character to stack
    ; first check if it is 0. If it is and we are not in READ_STATE_CLOSED
    ; then try again. If it is and we are in READ_STATE_CLOSED, then done
    cpi 0                               ; compare to 0
    fne .continue_with_byte             ; it's not 90, so conitnue with processing
    ciz READ_STATE_CLOSED,data_read_state ; are we in READ_STATE_CLOSED?
    fne .read_next_byte                 ; we aren't so continue waiting
    jpa exit_loop_done                  ; we are done!
.continue_with_byte:
    ldz data_read_state                 ; get current read state
    jar .read_byte_jt                   ; jump to proper handler for state
.read_byte_jt:                          ; the jump table
    .2byte .read_byte_start
    .2byte .read_byte_data_ws
    .2byte .read_byte_data_hex
    .2byte .read_byte_closed

.read_byte_start:
    miz READ_STATE_DATA_WS,data_read_state ; it is, change state machine
    fpa .read_next_byte                 ; next byte

.read_byte_data_ws:
    ; skip white space, build a 1 byte hex value, error out otherwise.
    ; hex values must be bare
    jps is_char_delimiter               ; don't need to push char value since it was pushed above
    cpi 1                               ; is it a delimiter character?
    feq .read_next_byte                 ; it is. fetch next character.
    jps is_char_hex                     ; is the character a hexadecimal
    cpi 1                               ; is it?
    feq .start_hex_capture              ; it is, start the hex capture
    jps is_escape                       ; determine if an escape character has been sent
    cpi 1
    beq .close_data_capture             ; it has bee. escape loop
    lds 1                               ; get the character on the stack
    cpi DELETE_CHAR                     ; did the user cancel?
    beq exit_loop_cancel 
    ; if we are here, we do not know what to do with the character.
    jpa exit_loop_error                 ; exit with an error

.start_hex_capture:
    lds 1                               ; get character from stack
    phs                                 ; first push the value one deeper into the stack
    miz READ_STATE_DATA_HEX,data_read_state     ; set state to next stage
    jpa .read_next_byte                 ; next byte

.close_data_capture:
    miz READ_STATE_CLOSED,data_read_state
    jpa .read_next_byte
.align
.read_byte_data_hex:
    miz READ_STATE_DATA_WS,latent_read_state
    miz 0,byte_val                      ; initalize byte value to 0
    ; the only thre valid options here are another hex char or delimiter or '}'
    jps is_char_delimiter               ; is it a delimite?
    cpi 1                               ; check
    feq .eval_1_char_hex                ; it is. evaluate 1-char hex
    jps is_char_hex                     ; is it a hex?
    cpi 1                               ; check
    feq .eval_2_char_hex                ; it is, evaluate 2-char hex
    jps is_escape                       ; user done?
    cpi 1
    feq .close_then_evale_1_char_hex    ; it is. evaluate 1-char hex
    lds 1
    cpi DELETE_CHAR                     ; did the user cancel?
    beq exit_loop_cancel 
    ; if we are here, we do not know what to do with the character.
    jpa exit_loop_error                 ; exit with an error
.close_then_evale_1_char_hex:
    miz READ_STATE_CLOSED,latent_read_state
    fpa .eval_1_char_hex

.eval_2_char_hex:
    jps hex_digit_to_value              ; character highest on stack right now is least signficant nibble
    stz byte_val                        ; store to byte value
    pls                                 ; remove second character from stack
    jps hex_digit_to_value              ; character at top of stack is most siginificant nibble
    ll4                                 ; move value to high nibble
    or.z byte_val                       ; OR A into byte_val
    fpa .append_to_buffer               ; now append byte value to buffer

.eval_1_char_hex:
    pls                                 ; remove the delimiter form the stack. what remains is the 1 hex digit
    jps hex_digit_to_value              ; character highest on stack right now is least signficant nibble
    stz byte_val                        ; store to byte value
    ; fall through to append to buffer
.append_to_buffer:
    ldz byte_val stt data_buffer_ptr    ; copy evaluated value to current buffer location
    inv data_buffer_ptr                 ; increment buffer pointer
    mzz latent_read_state,data_read_state  ; reset state for parsing delimiters
    ; now compare current pointer to end of data buffer.
    ciz BYTE1(data_buffer_end),data_buffer_ptr+1
    bne .read_next_byte
    ciz LSB(data_buffer_end),data_buffer_ptr+0
    bne .read_next_byte
    ; if we are here we are at the end of the offer.
    jpa exit_loop_buffer_full

.read_byte_closed:
    ; any non-zero bytes read in at this stage are simply discarded
    jpa .read_next_byte




exit_loop_error:
    pls
    jps _Print "ERROR - failed to parse data\n"
    jpa exit

exit_loop_cancel:
    pls
    jps _Print "User canceled - bye bye!\n"
    jpa exit

exit_loop_buffer_full:
    pls
    jps _Print "ERROR - buffer full\n"
    jpa exit

.align
exit_loop_done:
    pls
    dev data_buffer_ptr                         ; decrement ptr since there is no "next value"
    mvv data_buffer_ptr,data_end_ptr
    jps _Print "Data read successfully!\nBuffer = {\n"
    miv data_buffer,data_buffer_ptr
    miz 0,counter
.print_loop:
    ldt data_buffer_ptr
    jas _PrintHex
    ciz 15,counter
    feq .print_newline
    jps _Print ","
    inz counter
    fpa .check_buffer_ptr
.print_newline:
    jps _Print ","
    jps _Print "\n"
    miz 0,counter
.check_buffer_ptr:
    czz data_end_ptr+1,data_buffer_ptr+1
    bne .next_byte
    czz data_end_ptr+0,data_buffer_ptr+0
    beq speak_buffer
.next_byte:
    inv data_buffer_ptr
    fpa .print_loop

speak_buffer:
    jps _Print "\n}\nNow speaking buffer ...\n"
    jps _SerialPrint "Now speaking buffer ...\n"
    phsptr data_end_ptr
    phsptr data_buffer
    jps speak_synchronous
    pls2 pls2
exit:
    jps _Print "Done!\n"
    jps _SerialPrint "Done!\n"
    jpa _Prompt


.align
; ------------------------------------------
; check character passed on stack (sp+3)
; if it is a delimiter. Returns 0 or 1
; in A accordingly.
; ------------------------------------------
is_char_delimiter:
    miz 0,counter                       ; initialize counter
    lds 3                               ; get passed character
    stz byte_val                        ; store to temp var
.loop:
    lzb counter,DELIMITER_CHARS         ; load the next compare char into A
    cpz byte_val                        ; compare the compare char to byte value
    feq .return_true                    ; if equal return true
    lzb counter,DELIMITER_CHARS         ; load the next compare char into A again (cpz wiped it)
    cpi 0                               ; are we at the end?
    feq .return_false                   ; if at the end the answer is false
    inz counter                         ; not at end. increment counter and try again
    fcs .return_false                   ; if the counter rolls over from 255, something is wrong. return false.
    fpa .loop                           ; try again
.return_false:
    ldi 0
    rts
.return_true:
    ldi 1
    rts
DELIMITER_CHARS:
    .cstr " \t\n,"

; ------------------------------------------
; check character passed on stack (sp+3)
; if it is a hexadecimal character.
; Returns 0 or 1 in A accordingly
; ------------------------------------------
is_char_hex:
    lds 3                               ; get characte to be inspected
    cpi '0'-1                           ; compare to '0'
    fle .return_false                   ; if <= '0'-1, then definitely not hexadecimal
    cpi '9'                             ; compare to '9'
    fle .return_true                    ; if >=0 and <= 9 then is hexadecimal
    cpi 'A'-1                           ; compare to 'A'
    fle .return_false                   ; if <= 'A'-1 then false
    cpi 'F'                             ; commpare to 'F'
    fle .return_true                    ; if >= 'A' and <= 'F' then true
    cpi 'a'-1                           ; compare to 'a'
    fle .return_false                   ; if <= 'a'-1 then false
    cpi 'f'                             ; compare to 'f'
    fle .return_true                    ; if >= 'a' and <= 'f' then true
    ; if we fall through to here then definitely false
.return_false:
    ldi 0
    rts
.return_true:
    ldi 1
    rts


; ------------------------------------------
; check character passed on stack (sp+3)
; if it indicates an escape
; Returns 0 or 1 in A accordingly
; ------------------------------------------
is_escape:
    lds 3
    cpi ESCAPE_CHAR
    feq .return_true
.return_false:
    ldi 0
    rts
.return_true:
    ldi 1
    rts

; ------------------------------------------
; converts a hex ascii character passed on
; stack (sp+3) to its value and returns that
; value in A
; Rturns a value of $FF if not a hex char
; ------------------------------------------
hex_digit_to_value:
    lds 3                               ; get characte to be inspected
    cpi '0'-1                           ; compare to '0'
    fle .return_error                   ; if <= '0'-1, then definitely not hexadecimal
    cpi '9'                             ; compare to '9'
    fgt .try_uppercase                  ; if >=0 and <= 9 then is hexadecimal
    sui '0'
    rts
.try_uppercase:
    lds 3
    cpi 'A'-1                           ; compare to 'A'
    fle .return_error                   ; if <= 'A'-1 then false
    cpi 'F'                             ; commpare to 'F'
    fgt .try_lowercase                  ; if >= 'A' and <= 'F' then true
    sui 'A'
    adi 10
    rts
.try_lowercase:
    lds 3
    cpi 'a'-1                           ; compare to 'a'
    fle .return_error                   ; if <= 'a'-1 then false
    cpi 'f'                             ; compare to 'f'
    fgt .return_error                   ; if >= 'a' and <= 'f' then true
    sui 'a'
    adi 10
    rts
.return_error:
    ; really should never be here
    ldi 0xff
    rts

;----------------
; Data Buffer
;----------------

#mute
data_buffer:
    .zero DATA_BUFFER_SIZE
data_buffer_end:

.memzone ZERO_PAGE_APPS
data_buffer_ptr:    .2byte 0
data_end_ptr:       .2byte 0
data_read_state:    .byte 0
latent_read_state:  .byte 0
counter:            .byte 0
byte_val:           .byte 0
#emit

#include "speechlib.min64x4"
